# https://www.youtube.com/watch?v=ErnWZxJovaM&list=PLtBw6njQRU-rwp5__7C0oIVt26ZgjG9NI
# script 1 - using youtube_dl
# script 2 - using selenium and pandas 
# generate using gemini and chatgpt, transformers (gen ai solution )- 
# another way - azure open and whisper model 
# automate shorts making process
# automate video making process - like a make a complete video

# WebDriver is a compact object-oriented API.
# It drives the browser effectively.
# WebDriver is designed as a simple and more concise programming interface.



#Selenium supports automation of all the major browsers in the 
# market through the use of WebDriver.

import pandas as pd
import os
from time import sleep
from selenium import webdriver


#  func3 = get the transcript
# func 4= convert transcript to pdf
# func5 = convert transcript to csv 


# func1 = open_url_in_chrome
# mode = headed -> Opens the browser with a visible window. 
# mode = headless -> Opens the browser without a visible window.-> runs on server
def open_url_in_chrome(url , mode ):
    if mode=='headed' :
        driver = webdriver.Chrome()
    elif mode == 'headless':
        options = webdriver.ChromeOptions()
        options.add_argument('--headless')
        driver = webdriver.Chrome('chromedriver.exe', options= options)
    driver.get(url)
    return driver

# Extra information about xpath
# A HTML document can be considered as a XML document, 
# and then we can use xpath which will be the path traversed to reach the element of interest to locate the element. 
#  The XPath could be absolute xpath,
# which is created from the root of the document

# func2 = accept terms and conditions
def accept_terms_and_conditions(driver):
    # step 1: click on the no thanks button 
    # doing this will click on no thanks when the user is prompted to sign in
    driver.find_element_by_xpath("//paper-button[@aria-label='No thanks']")
    # step 2: click on the accept button
# explaination : 
# google's cookie consent - inside an iframe 
# iframe - inline frame - is a webpage embedded inside another webpage
# selenium cant directly interact with elements inside an iframe unless it switches to the iframe
# use driver.switch_to.frame() to switch to the iframe
# function identifies the correct iframe by looking for an iframe whose src (source url) contains 'consent.google.com'

# google.consent.com - probably relates to cookie or privacy policy consent
    driver.switch_to.frame(driver.find_element_by_xpath("//iframe[@src , 'consent.google.com']"))

# wait for the page to load-Ensure that all elements inside the 
# iframe are loaded and ready for interaction.

    sleep(1)
# click on the I agree button on the cookie consent form
    driver.find_element_by_xpath('//*[@id="intorAgreeButton"]/span/span').click()
# wait for the page to refresh 
    sleep(3)
    # manually refresh the page to see if everything is loaded
    driver.refresh()



 # below content generated by gpt
#  This function is essential in automation scripts to 
# ensure that YouTube's pop-ups (like cookie consent, 
# T&Cs, or sign-in prompts) do not block further 
# interactions, such as extracting the transcript. 
# It ensures that the script can proceed without manual 
# intervention.














